/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agenda_H
#define Agenda_H

#include <thrift/TDispatchProcessor.h>
#include "doc_types.h"

namespace tutorial {

class AgendaIf {
 public:
  virtual ~AgendaIf() {}
  virtual void getDatabase(std::string& _return) = 0;
  virtual void insert(std::string& _return, const std::string& name, const std::string& fone, const Int op) = 0;
  virtual void search(std::string& _return, const std::string& name) = 0;
  virtual void remove(std::string& _return, const std::string& name) = 0;
};

class AgendaIfFactory {
 public:
  typedef AgendaIf Handler;

  virtual ~AgendaIfFactory() {}

  virtual AgendaIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgendaIf* /* handler */) = 0;
};

class AgendaIfSingletonFactory : virtual public AgendaIfFactory {
 public:
  AgendaIfSingletonFactory(const boost::shared_ptr<AgendaIf>& iface) : iface_(iface) {}
  virtual ~AgendaIfSingletonFactory() {}

  virtual AgendaIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgendaIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgendaIf> iface_;
};

class AgendaNull : virtual public AgendaIf {
 public:
  virtual ~AgendaNull() {}
  void getDatabase(std::string& /* _return */) {
    return;
  }
  void insert(std::string& /* _return */, const std::string& /* name */, const std::string& /* fone */, const Int /* op */) {
    return;
  }
  void search(std::string& /* _return */, const std::string& /* name */) {
    return;
  }
  void remove(std::string& /* _return */, const std::string& /* name */) {
    return;
  }
};


class Agenda_getDatabase_args {
 public:

  Agenda_getDatabase_args() {
  }

  virtual ~Agenda_getDatabase_args() throw() {}


  bool operator == (const Agenda_getDatabase_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agenda_getDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_getDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agenda_getDatabase_pargs {
 public:


  virtual ~Agenda_getDatabase_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_getDatabase_result__isset {
  _Agenda_getDatabase_result__isset() : success(false) {}
  bool success;
} _Agenda_getDatabase_result__isset;

class Agenda_getDatabase_result {
 public:

  Agenda_getDatabase_result() : success() {
  }

  virtual ~Agenda_getDatabase_result() throw() {}

  std::string success;

  _Agenda_getDatabase_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Agenda_getDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agenda_getDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_getDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_getDatabase_presult__isset {
  _Agenda_getDatabase_presult__isset() : success(false) {}
  bool success;
} _Agenda_getDatabase_presult__isset;

class Agenda_getDatabase_presult {
 public:


  virtual ~Agenda_getDatabase_presult() throw() {}

  std::string* success;

  _Agenda_getDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agenda_insert_args__isset {
  _Agenda_insert_args__isset() : name(false), fone(false), op(false) {}
  bool name;
  bool fone;
  bool op;
} _Agenda_insert_args__isset;

class Agenda_insert_args {
 public:

  Agenda_insert_args() : name(), fone(), op(0) {
  }

  virtual ~Agenda_insert_args() throw() {}

  std::string name;
  std::string fone;
  Int op;

  _Agenda_insert_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_fone(const std::string& val) {
    fone = val;
  }

  void __set_op(const Int val) {
    op = val;
  }

  bool operator == (const Agenda_insert_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(fone == rhs.fone))
      return false;
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const Agenda_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agenda_insert_pargs {
 public:


  virtual ~Agenda_insert_pargs() throw() {}

  const std::string* name;
  const std::string* fone;
  const Int* op;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_insert_result__isset {
  _Agenda_insert_result__isset() : success(false) {}
  bool success;
} _Agenda_insert_result__isset;

class Agenda_insert_result {
 public:

  Agenda_insert_result() : success() {
  }

  virtual ~Agenda_insert_result() throw() {}

  std::string success;

  _Agenda_insert_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Agenda_insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agenda_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_insert_presult__isset {
  _Agenda_insert_presult__isset() : success(false) {}
  bool success;
} _Agenda_insert_presult__isset;

class Agenda_insert_presult {
 public:


  virtual ~Agenda_insert_presult() throw() {}

  std::string* success;

  _Agenda_insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agenda_search_args__isset {
  _Agenda_search_args__isset() : name(false) {}
  bool name;
} _Agenda_search_args__isset;

class Agenda_search_args {
 public:

  Agenda_search_args() : name() {
  }

  virtual ~Agenda_search_args() throw() {}

  std::string name;

  _Agenda_search_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Agenda_search_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Agenda_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agenda_search_pargs {
 public:


  virtual ~Agenda_search_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_search_result__isset {
  _Agenda_search_result__isset() : success(false) {}
  bool success;
} _Agenda_search_result__isset;

class Agenda_search_result {
 public:

  Agenda_search_result() : success() {
  }

  virtual ~Agenda_search_result() throw() {}

  std::string success;

  _Agenda_search_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Agenda_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agenda_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_search_presult__isset {
  _Agenda_search_presult__isset() : success(false) {}
  bool success;
} _Agenda_search_presult__isset;

class Agenda_search_presult {
 public:


  virtual ~Agenda_search_presult() throw() {}

  std::string* success;

  _Agenda_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agenda_remove_args__isset {
  _Agenda_remove_args__isset() : name(false) {}
  bool name;
} _Agenda_remove_args__isset;

class Agenda_remove_args {
 public:

  Agenda_remove_args() : name() {
  }

  virtual ~Agenda_remove_args() throw() {}

  std::string name;

  _Agenda_remove_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Agenda_remove_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Agenda_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agenda_remove_pargs {
 public:


  virtual ~Agenda_remove_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_remove_result__isset {
  _Agenda_remove_result__isset() : success(false) {}
  bool success;
} _Agenda_remove_result__isset;

class Agenda_remove_result {
 public:

  Agenda_remove_result() : success() {
  }

  virtual ~Agenda_remove_result() throw() {}

  std::string success;

  _Agenda_remove_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Agenda_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agenda_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agenda_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agenda_remove_presult__isset {
  _Agenda_remove_presult__isset() : success(false) {}
  bool success;
} _Agenda_remove_presult__isset;

class Agenda_remove_presult {
 public:


  virtual ~Agenda_remove_presult() throw() {}

  std::string* success;

  _Agenda_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgendaClient : virtual public AgendaIf {
 public:
  AgendaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgendaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDatabase(std::string& _return);
  void send_getDatabase();
  void recv_getDatabase(std::string& _return);
  void insert(std::string& _return, const std::string& name, const std::string& fone, const Int op);
  void send_insert(const std::string& name, const std::string& fone, const Int op);
  void recv_insert(std::string& _return);
  void search(std::string& _return, const std::string& name);
  void send_search(const std::string& name);
  void recv_search(std::string& _return);
  void remove(std::string& _return, const std::string& name);
  void send_remove(const std::string& name);
  void recv_remove(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgendaProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgendaIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgendaProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgendaProcessor(boost::shared_ptr<AgendaIf> iface) :
    iface_(iface) {
    processMap_["getDatabase"] = &AgendaProcessor::process_getDatabase;
    processMap_["insert"] = &AgendaProcessor::process_insert;
    processMap_["search"] = &AgendaProcessor::process_search;
    processMap_["remove"] = &AgendaProcessor::process_remove;
  }

  virtual ~AgendaProcessor() {}
};

class AgendaProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgendaProcessorFactory(const ::boost::shared_ptr< AgendaIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgendaIfFactory > handlerFactory_;
};

class AgendaMultiface : virtual public AgendaIf {
 public:
  AgendaMultiface(std::vector<boost::shared_ptr<AgendaIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgendaMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgendaIf> > ifaces_;
  AgendaMultiface() {}
  void add(boost::shared_ptr<AgendaIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDatabase(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDatabase(_return);
    }
    ifaces_[i]->getDatabase(_return);
    return;
  }

  void insert(std::string& _return, const std::string& name, const std::string& fone, const Int op) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(_return, name, fone, op);
    }
    ifaces_[i]->insert(_return, name, fone, op);
    return;
  }

  void search(std::string& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, name);
    }
    ifaces_[i]->search(_return, name);
    return;
  }

  void remove(std::string& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(_return, name);
    }
    ifaces_[i]->remove(_return, name);
    return;
  }

};

} // namespace

#endif
