1) Configurando o BANCO DE DADOS:
	1.1) Criando o banco de dados:

	CREATE DATABASE db-server;

	1.2) Criando a tabela dos dados:
	CREATE TABLE models (company CHAR(30), country CHAR(30));

	1.3) Preenchendo a tabela com os dados:
	INSERT INTO models(company, country) VALUES ('Ford','Estados Unidos');
	INSERT INTO models(company, country) VALUES ('Toyota','Japão');
	INSERT INTO models(company, country) VALUES ('Mercedes-Benz','Alemanha');
	INSERT INTO models(company, country) VALUES ('BMW','Alemanha');
	INSERT INTO models(company, country) VALUES ('Honda','Japão');
	INSERT INTO models(company, country) VALUES ('Volkswagen','Alemanha');
	INSERT INTO models(company, country) VALUES ('Audi','Alemanha');
	INSERT INTO models(company, country) VALUES ('Hyundai','Coreia do Sul');
	INSERT INTO models(company, country) VALUES ('Porsche','Alemanha');
	INSERT INTO models(company, country) VALUES ('Lexus','Japão');
	INSERT INTO models(company, country) VALUES ('Ferrari','Itália');

	1.4) psql -h localhost -d db-server -U postgres // acessando o banco pelo terminal(postgres = usuário e db-server = nome do banco de dados)

	1.5) Visualizando tabela com dados do terminal:
	SELECT * FROM models;

	1.6) Dados foram configurados!
---------------------------------------------------------------------------------------

2) MEMCACHED:
	2.1) memcached -u root & // iniciar o memcached
	2.2) nc localhost 11211 // ver estatisticas do memcached
		stats 
	2.3) python view.py Alemanha // Comando que retorna as empresas de carro com origem na Alemanha. Rotina: Verifica se os dados para esta consulta está no cache, não estão, faz a consulta no banco de dados postgres, retorna a resposta desta consulta e grava no memcached.
	2.4) python view.py Alemanha // Mesma pesquisa. Os dados serão retornados mais rapidamente uma vez que primeiro será verificado se os dados para esta consulta estão no cache, o que retorna positivo, logo não é preciso pesquisar numa fonte de dados secundária mais lenta como por exemplo o HD, apenas retorna-se os dados do cache.

---------------------------------------------------------------------------------------
3) Criando uma banda lenta para verificar melhor quão mais rápido pode ser busca de dados com o uso do memcached.

	3.1) INSERE DELAY:
		3.1.1) ping localhost
		3.1.2) sudo tc qdisc add dev lo root netem delay 400ms
		3.1.3) ping localhost
		3.1.4) python view.py Alemanha (Dados não estão no cache, portanto, demora mais)
		3.1.5) python view.py Alemanha (Dados estão no cache, portanto, mais rápido)

	3.2) DELETA DELAY:
		3.2.1) sudo tc qdisc del dev lo root netem

---------------------------------------------------------------------------------------


